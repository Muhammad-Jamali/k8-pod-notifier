apiVersion: v1
data:
  config: YXBpVmVyc2lvbjogdjENCmNsdXN0ZXJzOg0KLSBjbHVzdGVyOg0KICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSQ1ZFTkRRV1V5WjBGM1NVSkJaMGxKUnpsUVZGRmtiVU50ZWtsM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUWHBGZUUxcVNYaE5la0UxVFVSa1lVWjNNSHBOZWtWNFRWUnJlRTE2UlRCTlJHUmhUVUpWZUFwRmVrRlNRbWRPVmtKQlRWUkRiWFF4V1cxV2VXSnRWakJhV0UxM1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTENrRnZTVUpCVVVNM1FpczRWMmRhU2tOblRVWXlkMlEwU0RkUllucFZjblJwVFhjM1ZGZGhXWEp1UmxCM2IyTTJWVVl5YURSeE0xQjFlRE5ZTjFWblRrVUtTbmhTUkdsRmJWSlVMMVpRVDBwTmIwaGFka2hVYjFKVkt5OVBZVTFNWTB0TFpqSTBiVkZGZEZsRU5EVXJOR2h4VFV0c2VXMTRaazVLUzFSMFJrRjJMd3BTU1dsUU1tMUNhVTVYWWpaTmJFWkpXV1I1VFZaRk5uZGlVamRwVG5aclYzaEpVbTVXTlRkWVZTOUpjVGt4WVZvckwwOW1laXRTU2xFcmNHTXJTSFp0Q21kSk9WUnRXRmgzZEZJd2RHaE9VU3R6UWs4d1ptWXhOSFZUYVRkMFVHSnROMHB0YkdWRGJuSnhPRUpzYVRjdlJ6bE9WRmhpT1RoM1UyNVRabUpoZFhjS2RqQmFjRTkyVVVjNGQxTmtjVnBuVFdKRVkxWTBiM05WV2pGaVdqUmxiRWMxUlRGcVJqVmhLekpPVm05b1RuQjZaM1JwU2sxRk9FMXZUMWRqYzNoWFJBcHpXa052TldkeFVHc3dkMmt4TmpOSmIyUlBUblpTUW5WWE5taEVRV2ROUWtGQlIycFhWRUpZVFVFMFIwRXhWV1JFZDBWQ0wzZFJSVUYzU1VOd1JFRlFDa0puVGxaSVVrMUNRV1k0UlVKVVFVUkJVVWd2VFVJd1IwRXhWV1JFWjFGWFFrSlRlbGhPUld4RVQzaDJNSGxIYjJsSlRrTmhZM2xwTVhsTlJWSjZRVllLUW1kT1ZraFNSVVZFYWtGTloyZHdjbVJYU214amJUVnNaRWRXZWsxQk1FZERVM0ZIVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUWxGQ1RWWnpWM0pRTHdwU05XRnFkMEpSUzBaME9WRkxNVmxpSzJ4NlZFODJORU55U0V4WlZucFJNakI2VWtKWFpHVmlVMWxwYVdGa2FWWm9WRzU2VWxoSVJrZzJORUpRUzFoMENsSjNVM1ZHT0N0MVVtWjZha2gzVm0xWFJDOTFaV1UyTlZOcFNHNTRXRk52UTB0dk9XaFBUVWxLVFhkT1NrbGlabmx5ZGtZMGVDdHRXV2RFYldSYWRuWUtVMHBIV1RsdlIyNUdUMUZrUlZKT1FuTmpiVFpYV2tFM2VrdzNkbUUzZEdKdE0wMHpRM2hQUlRWTWF6UktjREZJYzBkRVJUaHdVWEJsTVRNMWFtUTVkUW8zVDAxSmFuVktabWhwTUUxeGFEUk9WaTl3ZEZGck1rOU5kbkprTUdGdmQyNVRUM2hPYVhScFdHTklNRlo1VVZoQ0szcG9jM0JvVmxkT2REQmxaR3AxQ21kNFdWcGhTblJoTWtSdlRXSkVSelV3UjJNemNYSlhTRk5YYVdsMFJISllMMGQ0YWt4Q1ZsVktlVzlpTUM5MFdFVkhVRGRpWVhZdldYVnllVlUyY25vS1JWUTNSbW96UjBjd1dYWkxDaTB0TFMwdFJVNUVJRU5GVWxSSlJrbERRVlJGTFMwdExTMEsNCiAgICBzZXJ2ZXI6IGh0dHBzOi8va3ViZXJuZXRlcy5kb2NrZXIuaW50ZXJuYWw6NjQ0Mw0KICBuYW1lOiBkb2NrZXItZGVza3RvcA0KLSBjbHVzdGVyOg0KICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VWTVJFTkRRWEJUWjBGM1NVSkJaMGxSUjJoaFozRmFOVEJtZVhGVVQzVnZjVnBEWTJ4TGFrRk9RbWRyY1docmFVYzVkekJDUVZGelJrRkVRWFlLVFZNd2QwdDNXVVJXVVZGRVJYbFNhMWxxYkdsYWFsRjRUWGt3ZVU5SFJYcE1WRkV3VGtkTmRFOUhWbXBQVXpBelRWZFJNMWx0V21sT1JFWnBUMWRSZHdwSlFtTk9UV3BSZDAxNlJUQk5SRmw0VFdwTk5GZG9aMUJOYWtFeFRrUkJlazFFWTNkT2VrVjVUWHBvWVUxRE9IaE1WRUZ5UW1kT1ZrSkJUVlJLUjFKcENrOVhTbTFPUkVWNlRGUkpORmxVVFhST1JGRXdXWGt3TkZwWFRUVk1WR040V2tSa2FWcHRTVEJOVjBrMVdrUkRRMEZoU1hkRVVWbEtTMjlhU1doMlkwNEtRVkZGUWtKUlFVUm5aMGRRUVVSRFEwRlpiME5uWjBkQ1FVNVRWSFJxUjNRMmMycG1aRlIyUXpoM1VWTlBhRnBSWVM5VVpGSlBOWFJVZGs1RmMzZEVTZ3BUY0RkcVVpOXJPR1F6WmxGRlNXdFdXbk15TmxKR0syNUNZbGRKYlM5VVIzWkRNWEpCZEhOdFJVSnZlVnByYm5aUWFsVlRhalZYWkZGbFpETlpMelo1Q2xkamVGZGpSWFpwVGtwdWEwVm9WVkZ6UkdaalZteG5SRkJGUVVveGJYWlpaRXgzVG04dlNGQXlTREF2V1ZnM01GVnVURmhCYUdodk9UVnZSbXA1YTNJS2JFb3JhRlJZUkVGNGMyMUdSVVZHYUVOcU1rVk9RbmhKT1U1cWQxVnlSV1Y1VlVaaFJFWkdZak5WYURoaFYybFlNek0xZWtkWFVsSnZZemhPT1hsU1Znb3daa2N2UkRseVIycFZUM0pDUm5samRWTkZlRk5rVWxOTlVURlhlRmhPYkdsaGRtb3dNR3BHWmtoclowNU1WelppYzNsQk9UbFZWMU12ZGxKTFZqVnNDbnBhYWtSeU9XbEpTaXRrU3pSVVVIVlhUR2MyVldWUFZVMU1hMnczYTBOWVVVTlJaVXA1T1RKMVVrSTVValJVWkhKRU5rZzJVVVZpZDNwdFpIUlZWa29LUXpGNFNXTmhlRzFyVkVkbFdFOWtaMU5hTjJwUGVtVnZLMDlrYUhSWWNGbE9TR1pxYURWMlJFTjJSQ3RMZFN0NGNVTlVTM054TWk5WE1WSTJlamxsZGdwQ09VNVhaM1pIY0hSdFExUnJVV2RWYVZBcmFXSnFLM3BJZVdaaFV6WldWbkJCYVdVNVQyeHJRbkJhTjNwcVowRk1laTlxY25ObFdscFhSRGxVUVhod0NqSkVia2w2ZUhCTGVWVTRObmxPV2tGUllqTlFPVVZPWlhoM1NVUkJVVUZDYnpCSmQxRkVRVTlDWjA1V1NGRTRRa0ZtT0VWQ1FVMURRV2RSZDBSM1dVUUtWbEl3VkVGUlNDOUNRVlYzUVhkRlFpOTZRV1JDWjA1V1NGRTBSVVpuVVZWeVp6SmhUalUyTml0bFkwVkZTMWRGUlhsNVl6RnViWHBpVkhOM1JGRlpTZ3BMYjFwSmFIWmpUa0ZSUlV4Q1VVRkVaMmRIUWtGREwzZHVibWxOVTFwMlRVUnZVSGR3ZDNCb2RHd3hWVUZzYm01bFdrNXZNSFV5YUU5TFdscHFZWGRJQ2xSR04yRTRTR3hPYmxWNFQwZHNjV0ptT1ZWemRrMUZkRlZCTHpodFRHOWpZMUZUYkVOYVFtNVJTM1ZPUkRJMFVUWTFRM0paVEdRMFdVSk1PWGxPYWtjS1ZEbGxlVWg0TUcxTWF5czRXVU5OVFVWYU1qQmpVV2xzZFRKV2FrbEhPVVIwYWxGTlNHdFVXWGN3ZHpCTFQyZHNSblk1SzJGeVpuVjBaVFJ0ZFdwSE5BcE1SMjFGY21aNGJVNXdRaTlHY1RGWGFFdHpObnBVYTFGM1ZVTjNWVEozZEVKVllWbHNNM2d2TWpWQ2RFaExOWEZUWTFCNFZWUjFjR3d4YUVWTGVERTJDbkIyTVRGQlVDOVdibU5QVG1SbEswOUNZbEpCYzFjd01DOWFiRE0wWlhWeVpFdzBjemt3YzNNd1lqZEpjMmR3WVVacmFHUndVelpFWjFsWU5VeGlkbWdLZG10eVFYWnVZMVpoWkZSdmRYRnZPVk5rTUdsdU5rTXZRVUpsZUdOTllURkJhMDFaVkZneFRGQTJXRXBqTVVzeFducE1SMVZ1TUZBdmNDdEpNMGhNY2dwaksyOVRhWGhtZGl0dE5UUjZXRGxwZFhGNVlTOURaMHBtYms1UFpTdDRhMVl3V1M5aVRHMW1hVXBFWjI1a1ZuWlRNRmgwVUZORWFWTXpTWFZuZUN0eENrRnZLMjh5UzJaU2QxVndheXMwZFZjelMySXJVV3NyUml0eFZqTnhhRXMxVTFsUmFXUmFRV3BwYldKYU1rWnRjbE5tVkhselFqRlZaMGxyY0ZGalIwa0tNMFJtVlU4NFIwVTJMMDFsYlRkUWFGTXhiMlUxWnowOUNpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwSw0KICAgIHNlcnZlcjogaHR0cHM6Ly8zNS4yMzcuMTEwLjMxDQogIG5hbWU6IGdrZV9hcmNhbmUtdHJhbnNpdC0zNTc0MTFfdXMtZWFzdDFfc2hhZWQtZGV2DQotIGNsdXN0ZXI6DQogICAgY2VydGlmaWNhdGUtYXV0aG9yaXR5LWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVZNVkVORFFYQlhaMEYzU1VKQlowbFNRVXN3Wm1obFVWZzBiV3hHU1RCelRURjVjeXRNVldkM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYY0tUSHBGZEUxRGMwZEJNVlZGUVhoTmEwMTZVWGROVkdzd1RtcFZkRnBVVW0xWmFUQXdUVWRaTlV4VWFHdE9WRVYwVGtSS2FVOVVUVEZPUkdodFdtMUplZ3BOUTBGWVJGUkplazFFWTNsT2VrRTFUVVJSTUU5V2IxbEVla2wzVGxSTmQwNTZSVFZOVkVGM1RrUlJOVmRxUVhaTlV6QjNTM2RaUkZaUlVVUkZlVkY2Q2s1RVFYaFBWRkV5VGxNeGJFNUhXbWxNVkZGM1dtcHJkRTlIVVRGTlV6QXdUVzFKTlUxNlZUQlBSMXB0V1dwTmQyZG5SMmxOUVRCSFExTnhSMU5KWWpNS1JGRkZRa0ZSVlVGQk5FbENhbmRCZDJkblIwdEJiMGxDWjFGRVEydFVNV3d5VldsU1VUZElkazlHVlZrMGNUUkJhM2RIU2s0d1VWZFlLMjFrY2taMllncGxZelJ5Y0c1b2NrOTVOakZ2VTNoR1QxRnlPVlprZVdSdWEwZG5SRE40ZEVwUVZYSTFTa0ZRWlVkUFFrRkdNamxKWkRKcWJqVnRUVzVGUW1aSk1FMVFDbWM0YjJ3cldVcFNWWEJMSzNKdFZXVnNaWEJuYUdsNUwxQnFhU3NyUm05RE1WaHRNM1pKZUZWeFJrTlpXVUp5WWtWdE0yaGpjaTlMWlhnMk4zWnZObG9LVUhWSlQxTmxWSEZHTVZKSFZrMXBWRkZPTmpsdk9HUkhjR2d3Wnk5R09VOUtaMUo0UlM5M1NXcGhNbkZqTnpoR1QzVTJkSGhWV2tGNU1YSlpNMGgzU0FwaVV5OVZLMGRvYm5GYU4weFFVbk5sYUhGalZVMTFXbWRUTDNKMVozRkVjMHRpTm1Kb2VUSk9RbXN5U214UWNUbHBOR3RzV2xKamFXWkRNa3AzUlZoVkNrOU9TQzluUm5Fek5YRnRiakpuUlZBMmNVY3dNSFIwZWpOME5qVjRUbHB1SzNZNVQwdG5SamRLTWpkM1ZrbEJia2xFYTBremVYY3lSMVJrWTNOdWVVTUtRM0p1Ylc1elpUbG9SR1JCYUd0NWJqZFVkVXBvYVhad2RWQTFOMlZETnpseFRreEhjRWQyVGxadVpqVm1MMWwxYjFneFQydzBka0pKU2l0UFN5OHJaUW8xWVVsc2MyZ3pRM0o2VTFKc2NuQnlkSHAxYXpOcVJHYzBiMWxSVkUwMmJTdENSeXRaYlVKUFYyUlJTemhEY0ZSTmEyOXFRMlZCWjBGaWJVbFJjRmxWQ2tsWk5IRjJOM2t2WjJKbFRuUm1iM1ZUT1ZFemMxSkNRMGx6VFVOQmQwVkJRV0ZPUTAxRlFYZEVaMWxFVmxJd1VFRlJTQzlDUVZGRVFXZEpSVTFCT0VjS1FURlZaRVYzUlVJdmQxRkdUVUZOUWtGbU9IZElVVmxFVmxJd1QwSkNXVVZHUWpSeWNuUk5UemRqVVhoSUwycDFPVVZrVHpSRFdVbHhhMGtyVFVFd1J3cERVM0ZIVTBsaU0wUlJSVUpEZDFWQlFUUkpRbWRSUVU5NWRGZzJNREkwWldScFNWQTBTVmxEUVhwWWEyOUZkelV6V1ZSVE1WTmtTVU40U1ZKdVJVWnBDa3QxT0ZGUGIweFNURkJSVFZwaWJEUXJlRFpYVTJ4YVNrWjZLMHA1TW5KeldUZDBla3RGZEZoVlVISXZObm81ZVVsd2JDdDFVVEJKV2tZeU9XbHpObWNLUlZnM05GVnFjRTlJY0hCTGRWaFNNa2RsWmxCMVdHeFhTVUZMTWxCcVJXbHFNSEp6ZUdOakwzUTJWRWRPYURGa1dVaFVZWGsyYkUxb1lYcExSMDFNYWdvM1VXUm1aRmhpTVhCblVqUlVXRlZUZDI1aGEweDNabFZtU1hNMVlWZ3ZZbGd4VEVSUWEyc3dNelo0VWpOUEwwOUdTM051TWtOeWVYUmxPSFEwTDBVeUNrbEtUakpuU1V3eFZVeGplVlUyTTBKTlNHcDBZazVWUkU5MmVuRk9WRkl2WnpSbWIzcG1VVkUyUzFOR1psbFNkWEJZY25Oa1dVdDViRkZvTjI1eVVHOEtlV1UwYkVZclNGZzNhVTh5ZEd0MFdFTktjVTlyUm5Wd1FqWkdiMU5aZGpKak5ESlhkR2d4VGlzM1FsYzRVeTgwYkZoUlowSm1NMncxZDFkWmIwa3hhZ3BLTlV0RVp6ZFRiamhFZWxvNVNuVndSM0ZHWjNwRVNEUlFNWGgzUVV3eFlVUkZZemR4YTJaWWVHOXpXRmcxVkRNNFlVZFVWRzR4TjBWbEwwWTNhRGwzQ25NeFoxVlJUSGRQZUVGVGJrSnliamxFWTFaTWREVXZUR2QzUTBaeGNGUmlZMjFEV1ZSTGFWVkdjekl6Y2pNemFsWTNZMXB1UnpGcE1HY3pRMDQzZGpnS2RuUTBWVEZyZERaU2NqQlVTV3hhTkU4eWFTOVVSbXM5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLDQogICAgc2VydmVyOiBodHRwczovLzM0Ljc0LjIwNS4xNzENCiAgbmFtZTogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1wcm9kdWN0aW9uDQotIGNsdXN0ZXI6DQogICAgY2VydGlmaWNhdGUtYXV0aG9yaXR5LWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVZNUkVORFFYQlRaMEYzU1VKQlowbFJSbEJzYUVWYUwyWkthWEZTYWxsdWVGRnJZVlJ6UkVGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFYWUtUVk13ZDB0M1dVUldVVkZFUlhsUk5VNTZXVEZPZWtKc1dsTXdOVTFVVm1sTVZGRTFUa1JuZEZsdFJUSmFVekI1V21wWmVrOUVXVFJOZWxFelRrUkpkd3BKUW1OT1RXcE5kMDU2UlRCTlZFMTNUV3BSZVZkb1oxQk5ha0V4VFhwQk0wMUVXWGhPUkVGNVRrUktZVTFET0hoTVZFRnlRbWRPVmtKQlRWUktSR3N6Q2s1cVZUTk5SMVpzVEZScmVFNVhTWFJPUkdzd1QwTXhhVmxVV214TVZFcHRUbXBOTkU1cVozcE9SR013VFdwRFEwRmhTWGRFVVZsS1MyOWFTV2gyWTA0S1FWRkZRa0pSUVVSblowZFFRVVJEUTBGWmIwTm5aMGRDUVUxUVdYZE9TRVJxTURKa2MwZEpTeXRhUkZndmRGTTJjV1pyTTFkNFEwOUlWMnMxVlRFMlZncHViVEpWUm5WUFZ6aDRXRXRZZUdRd2R6TlNhblp4T1VGdGNXUlRSMmQ1VG5sRWJXeEZVVzlqY25Oa1RHcFdaMmQxVVhaaVdFRkJTWEpXY0hoUFpVWndDblpHV0daTU5tVnNWR2hQZEVkeWVHbDViRFpQU1haaGNtdG9WR1kyYzNsamJWSkJNSGRZVWxKV1Rtd3dVRVlyVXl0NlNHaHlhMnhHSzFkTlZYUTBZWGtLVG14NVNUQlRTbTk2V0dKdU1YQkllVWN2V1c1emMyMXNkM0JFTlRKU05HVnNNRU40YjNWVVREUkZTM2R5VlVsS2JuWlljbTVVVmxkQldWQklTR3hIU0FwUVkxcEhNeXRoUWtSelNraHliMVpzU0ROVlIxTmhWVm92YW5KM2ExSjZiVmxPTkdzeWIycHNUMVpPZFM5RVRscDBXbmd3UzBwM2FtbEhNMjEyZDJwTENrZDJVbm8wY1ZGek1XMHZZMUZYVFhSME16UkxibU5EYmpGeVZrVjBNMUJRUjJkQmNWWkpjRmhwWkRKaU5XbzRaRTFWUkU0MWMxSkhTV2w1UlRGNmNHb0tNMmxaUW5GTFNraGFVa2t3VDJkWlRWVkxTVTAzVlU5MmNUVjVNMDlRZDFSMFpUWktOVzFtVGtZMFJGSjBRM0J0VW5sdVZ5OVpSbGhwUjJ0WGIwUjBaUXBGVUV0VFEyVllLM2MzYkdKRFVFNVJPR3RKWW5weU5ESXpZa1JYWmtKQk1YQkVXSFJHTW5sdllUQXhSRGQ1UTJrM2EzTnBObEJPVjBwdk9XOVdla1U1Q2t0NE4wMXFkek5OUVhOV1ltWk9LMFJNTVM5clEyODJXV1JSU1VSQlVVRkNiekJKZDFGRVFVOUNaMDVXU0ZFNFFrRm1PRVZDUVUxRFFXZFJkMFIzV1VRS1ZsSXdWRUZSU0M5Q1FWVjNRWGRGUWk5NlFXUkNaMDVXU0ZFMFJVWm5VVlV2V2xscFZGUkVkVmcwVlRaSGMwaFJSMnRrYnpsWmMycFNXa2wzUkZGWlNncExiMXBKYUhaalRrRlJSVXhDVVVGRVoyZEhRa0ZGZEc4MVJWQk9Tek00YVd4cFZWZHllWE5OUTBVM2FYRk9WRkoyVkV0bWJIbE9iVzFyYlVoTU5HOHdDalJsVURZMlZEQlBlVTgwZVhnd01Wb3dOSGxWUVZKRWMxUXJibmREV0ZCRlVTczFNVVZMYUZJMlYzQnpaazVMZW1zNWJXWmFSMVpET1ZOcWIwMXdaVEVLZGpGa05XaG9iR3RrWmxkbFluUnpjbXREWWt3ck1tcHZlRlV6Ym5BM1UxSnVaelJxZVUwNGJ6RnJlSE5qVG1wSldITkJVeXRtT0RGa1UxVldVSE5ZY2dvclRuUTBRa016T0ZWTFkwUmtNekpaWkdOQ1YxUmpjMGRXUmpKNmJqZ3hNbXhvWkdoT2QzcGxjMXBtZEhrM09VSlJSMkZKV1ZCR1ZHTndRVXA0WTFsVUNqSnpNMmRhVFZKSWNucHVhV3BpVmxKM2JFSmxWV1F3YTJSTFduSnJVbmhFYkdscFVVSXZVVVpyUTNZemVHZE9PVVZtYkU5eE9FSnFZMDlrVWxOaGVtUUtaMnBVVkhCbFV6aGpaMlppTW5wSk5VODRLekk1Tm0xMWRFdEtTblpqYUZCeVdISktNMVpqU0ZoVlVHUjZNazVJTTJaNlVrSlFSVVJYVG1nMFEyczNVUXBoWmxkTVFtSTNTSFF2ZWs0clNWVlViRGhIYW1sUlN6a3laek5IVDFsMlVsVXdURUZzVVV4VE0zYzBiV3RyZDNaUlIxWlFZazlEYkVsR1NVODRaM1ZHQ2pGelF6UlpOWHBEVDNKVVZYaFlaVmxtWjBKUFdXRmtOa3RCYWpOb1MycFBTRzkxVVRGaFdrZG9UWHBTVVd4YWRFdDBhM0YxVFc1TFNscHRjR2RzTkhjS1YzZEJkUzlITWk5TmRtWlVUMlp1UzBkS1ZURTJRVDA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLDQogICAgc2VydmVyOiBodHRwczovLzM1LjE5Ni4yMzAuMTI2DQogIG5hbWU6IGdrZV9hcmNhbmUtdHJhbnNpdC0zNTc0MTFfdXMtZWFzdDFfc2hhZWQtc3RhZ2luZw0KY29udGV4dHM6DQotIGNvbnRleHQ6DQogICAgY2x1c3RlcjogZG9ja2VyLWRlc2t0b3ANCiAgICB1c2VyOiBkb2NrZXItZGVza3RvcA0KICBuYW1lOiBkb2NrZXItZGVza3RvcA0KLSBjb250ZXh0Og0KICAgIGNsdXN0ZXI6IGdrZV9hcmNhbmUtdHJhbnNpdC0zNTc0MTFfdXMtZWFzdDFfc2hhZWQtZGV2DQogICAgdXNlcjogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1kZXYNCiAgbmFtZTogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1kZXYNCi0gY29udGV4dDoNCiAgICBjbHVzdGVyOiBna2VfYXJjYW5lLXRyYW5zaXQtMzU3NDExX3VzLWVhc3QxX3NoYWVkLXByb2R1Y3Rpb24NCiAgICB1c2VyOiBna2VfYXJjYW5lLXRyYW5zaXQtMzU3NDExX3VzLWVhc3QxX3NoYWVkLXByb2R1Y3Rpb24NCiAgbmFtZTogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1wcm9kdWN0aW9uDQotIGNvbnRleHQ6DQogICAgY2x1c3RlcjogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1zdGFnaW5nDQogICAgdXNlcjogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1zdGFnaW5nDQogIG5hbWU6IGdrZV9hcmNhbmUtdHJhbnNpdC0zNTc0MTFfdXMtZWFzdDFfc2hhZWQtc3RhZ2luZw0KY3VycmVudC1jb250ZXh0OiBna2VfYXJjYW5lLXRyYW5zaXQtMzU3NDExX3VzLWVhc3QxX3NoYWVkLWRldg0Ka2luZDogQ29uZmlnDQpwcmVmZXJlbmNlczoge30NCnVzZXJzOg0KLSBuYW1lOiBkb2NrZXItZGVza3RvcA0KICB1c2VyOg0KICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSUmFrTkRRV2x4WjBGM1NVSkJaMGxKU1hWVGNEaElaWEpsYTJkM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUWHBGZUUxcVNYaE5la0UxVFVSa1lVWjNNSGxPVkVGNlRXcEJlRTlVVVRGT1ZHeGhUVVJaZUFwR2VrRldRbWRPVmtKQmIxUkViazQxWXpOU2JHSlVjSFJaV0U0d1dsaEtlazFTYzNkSFVWbEVWbEZSUkVWNFNtdGlNazV5V2xoSmRGcHRPWGxNVjFKc0NtTXlkREJpTTBGM1oyZEZhVTFCTUVkRFUzRkhVMGxpTTBSUlJVSkJVVlZCUVRSSlFrUjNRWGRuWjBWTFFXOUpRa0ZSUXpocWIwbEJZeko2ZEdwRlUwa0tlVVpLWlVWek9HdHphbmxqVm1OYU16Y3lZWFphVjFZeWRUUmFMM0JVZVZKeUt6QXZkbUUzUVhOdVdsWlZSMW9yYmpaNlpXaGpObVJ0ZUZaalFXaEtkUXBDVGt0S2RWRlJVWEZyVFZCWlRHVlJTRlZLUTFWTVZXeGFaV2gyUkRobVRUbFBkVVIzUVdReGVYVm1RbXcxWlV4TlZHeFVRakl6S3pONFMzRTNha2t5Q2xaSVRrTjBhRE5GYmxvdlVFZHJNWEpNTWs1VFdteEhlbXhFUlROU2MzRkVPV2hzYVZkcE5tcHZWWFJIWVVsNE5tMDNSSGRrVkdwdlp6Z3JlV3RKVVhRS2VsWnlMMGRaZFdwVGEwOTJOV0pEZVdaRlFVdHhXVEY2T1RSWFVsTm1WbkozVkZOcFFXWTVUV2hIVTFjdloyODNTM0JMYW1GSkwxYzNMelpNZW10YWNBcGtPRmgzZHpOaU9GUmtka1o0V1daa2FWY3hNbkZSVUZwMk1rNVBWVVJ1Tm00dlJUWlZibVZZZG1FMWVYSjBXbVpIZURRdlZGVnVNWGRpYUhabmQwdHdDa1ZwY2pFdloyWjRRV2ROUWtGQlIycGtWRUo2VFVFMFIwRXhWV1JFZDBWQ0wzZFJSVUYzU1VadlJFRlVRbWRPVmtoVFZVVkVSRUZMUW1kbmNrSm5SVVlLUWxGalJFRnFRVTFDWjA1V1NGSk5Ra0ZtT0VWQmFrRkJUVUk0UjBFeFZXUkpkMUZaVFVKaFFVWk1UbU13VTFWTk4wY3ZWRWxoYVVsbk1FcHdla3RNV0FwSmQxSklUVUl3UjBFeFZXUkZVVkZYVFVKVFEwVnRVblpaTW5Sc1kya3hiV0l6U1hSYVIxWjZZVE5TZG1ORVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR0NrRkJUME5CVVVWQmFXWlpiVkkzWkhOeU1raDBMMEpYZEhwdVlUTlJkMUZ0TVV4Wk5tdzFOMjFSTm1OdE9HcE9VRlpaU2twbFduazBaalpVTHpGVVVIb0tTMU5KT1VaWFdqZElhbTh6YTJKVFdYbG9iVk4wT1V4bFVFWlpVRUZTVkhaQ0sxb3llREpFTDFsVVVpdG1abTEyYkZaT1ZrbG5jMnhZZUhsVlpEWkpiUXB6Y2tGTFF6UlZMMkUzY1hoU2FHNTFVek5UV1hGT1dWTXliemhrVlVWUk5YaHNRM052SzNSSk9EZHRURTR2UzJoa00zVkdPV1pvZGtGTWJYTlRlREpaQ25RNVRteGFaazlDYUZwRFFqUlJlRlpoV0RoVFdubDBiMkZTWTA1RVZUbHhlVGRSWTBFMVpGUkhUV3gwUVhselVtcGxjbVF3WjJGVFVra3lkazFVUjNJS1pGUnRURGM1YzFWbE5EQlZSbXB3VEc5SFkwOW1SbXhUWXpNMmFuUkVaRTVLYVd0aFQxVXZka1Z1YW01Mk5HSTNVblJJZFRKeldqQllabVZMVkcxR1JncDJWbmhDTkVFM1RtOWxVVEpIYVU1Mk4wd3pUVXBRTTBOdVFYZEdkV2M5UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQ0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGY0ZGSlFrRkJTME5CVVVWQmRrazJRMEZJVG5NM1dYaEZhVTFvVTFob1RGQktURWs0YmtaWVIyUXJPVzF5TWxac1pISjFSMlkyVlRocllTOTBDbEEzTW5WM1RFb3lWbFpDYldad0szTXpiMWhQYmxwelZsaEJTVk5pWjFSVGFXSnJSVVZMY0VSRU1rTXphMEl4UTFGc1F6RktWMWh2WW5jdlNIcFFWSElLWnpoQlNHUmpjbTUzV21WWWFYcEZOVlYzWkhRdmREaFRjWFUwZVU1c1VucFJjbGxrZUVveVpucDRjRTVoZVRscVZXMWFVbk0xVVhoT01HSkxaeTlaV2dwWmJHOTFielpHVEZKdGFVMWxjSFYzT0VoVk5EWkpVRkJ6Y0VORlRHTXhZUzk0YlV4dk1IQkVjaXRYZDNOdWVFRkRjVzFPWXk5bFJtdFZiakZoT0VVd0NtOW5TQzlVU1ZKcmJIWTBTMDk1Y1ZOdk1tbFFNWFV2SzJrNE5VZGhXR1pHT0UxT01pOUZNMko0WTFkSU0xbHNkR1J4YTBReVlqbHFWR3hCTlN0d0wzZ0tUMnhLTTJ3M01uVmpjVGRYV0hoelpWQXdNVW81WTBjMFlqUk5RM0ZTU1hFNVpqUklPRkZKUkVGUlFVSkJiMGxDUVZGRE1YVXpRbTByVG1weE1Yb3JVd3A1WldoQ1ZGVlhhVFkzY25CUWRUZE1NVGg1Vkdwc2JrNXdkelJLTlhaMFMzVXhTV2xHYWt4bkwwOUNObVE0VW1oc1NYQnlObTVHY1drdlpEVk9NMGxHQ2pSa1dEazRXRzFQYVd4MVdqZGlSR1ZWUzFRd0x6UTJiMGhsUmpWallUaDZlRzVrWTBFeUwzUlJkMUVyU0Zad2RGTkxUV3RsUlhVeU1EZ3ZUazlWYW1nS0wyMUZZekJwVVRoNFYwMXhia0ZKTUVwWVpFbERkVUZEUVdadGVHVklibVJCZVhKb1NWVXZSVXd3TlRSMFVIVmphMkptTWxCNlZFSXJWbGhrWm1aWGFRcE5PVVJrYmxCc01pdG5PRFJGUjBGaU1rWk9WWGxRUVhZcmRHY3ZMemhCWjBkM2IxbFVNR1pxVkdNM1VpdE1WRGRaY2pWTU1UUjJRbTlLVVZsM1MxTk1DbEl3WTA5b1JYQnJlVWRGUjJoMVRYWnNjMnM0WTJOdVUzUklOVGs1U0c0MGIyWXdObmx1U2xOa1VFdG1lV2RaV1dRclEySTNiMWRIUzFNclpraGtVVUlLVUVWRVNrbFZSMnhCYjBkQ1FVMU1PRWhTYzJJelRYWkhTRXRKY0RGQmVraDJhblZEWkhoRmVXRm1hMGxzU2xKdlJtOWpTRUZYTUU0MVIxbDFWVlpKZVFwWWFHMTFUREZsTDJWRFUwZHJVbG80ZUV0bGNXeHNWMEp6TjFWc2N6UTJaazFQYm1OclJUbHZWWGx5Vm1acmRscENiM3BtZDJSNlZEWktTR1ZUVm5Ob0NtZHhZMUJHVHlzek4yeDVNRXgxVm14TWNqTlVaVTVTUzNOSFlYRXJaeXRzUTBzM1pXUm1lbUpJVjNOb1Fua3JSak4xTnl0VVlUbE1RVzlIUWtGUVpWQUtZMnhsY0VSUmNERk9OVk5RVGpodE16TkhXVlUwUzBFeUwxaHpkamRMUkdSMmRsRnZlbGRhTmxRellsZHJkbWhtUVZGYWQzVllZVkpWV1dOdE1UQjVhQXBIWjI1bU56aHNTRE5xUm5OWE1FUTNObGhyZG1VMGEyWnpTV1F5ZVhaQlZXRnlXblpXZGtkdmRrTnBjSFJTWjNsV1dXdEpPV0pyTlZjM09IcFpZbmR1Q21zM1RVOVlibXczTWxjclNFZGpWVFJ2Y1dkS2VsRmxSR0pvZVdoWGRXZHFjR2xKWW5wMFVYcEJiMGRDUVVsUFExY3pZM1pSWVhCSGQyOVZNVkpSYjJnS2NHeExiekptYmtaVlQyaG5UM2xaYkZab2VGbFJNRkF3Wmt4dVYxQTBOell6WWtSbldrcHZRVlE1TkVONlRsTnVOMnhPVUc5UWJXMDRlbWRaV2pWVGJ3cEdaWFZHYTJWbFl6WTBjMWRXTkhBNGNFRm9Zakp1ZEVGcFltNXZabEF4TUVOd1ZESm1ValUxY0dSRWMzcHFlREpHUTB0QlFWSjZaVU13UVZSNldHcEVDbnBMYkRBM1dYUlFiR1pZZEZoMFZsVnhNVzU1VG5nNGJFRnZSMEpCU1d0TldEVmxTak5qT1ZKVWQwTjFVRWx6ZFdaNFVVRk5UVFZvVVhacVJXTnFTVzhLVFVWT1NYQXhWVFZHZFRkTFNWUnFaMnd4WlhsYVpXNTFlblo1VFVWNGNUUkJVWFJCWW5GWE1scEtjR3g1ZVhKNGFYSklkRU5ITTBWSWJEQlFPVmszZEFwTWNIQnhhblUxWm5CRVN6WnhTMlZLYW1aTE9FSkNVMVJZVjJjdlJVeGplVVJqUms1cWFESm5ORFpIY2xsRFptWnFObE5LVFVoclpGZEpUQzlFU3pKQkNuUnpUV2hOSzBscVFXOUhRV1pXUkVaeE9FWkZabWRzY1dGME9UQlJZemQxWVdkbVFqVjJSRTgyYWswNVQwVTJkV0p2YjFWNWREVTRSbGxZTUdwdFNtY0tUMHd6Tld0S1ZUbGpTa2xhV1RScVVqaDNRMEpyY3l0c2N6QklhRXR1V1V3dlQxVk1NVEprTVVkc1pYSXlTa1poWlVKd09EUTRXVTUzTkVORVdGUnFNQW92U21SUlFYbEVhR1JzWjJSMGJXNDJkbGgxVUhSNWRrUmFiWFZOY0d0aEsyUm1VUzl1UWxvNFdGZFdTRk1yTm5KR2NHSnhNU3R6UFFvdExTMHRMVVZPUkNCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRbz0NCi0gbmFtZTogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1kZXYNCiAgdXNlcjoNCiAgICBleGVjOg0KICAgICAgYXBpVmVyc2lvbjogY2xpZW50LmF1dGhlbnRpY2F0aW9uLms4cy5pby92MWJldGExDQogICAgICBhcmdzOiBudWxsDQogICAgICBjb21tYW5kOiBna2UtZ2Nsb3VkLWF1dGgtcGx1Z2luLmV4ZQ0KICAgICAgZW52OiBudWxsDQogICAgICBpbnN0YWxsSGludDogSW5zdGFsbCBna2UtZ2Nsb3VkLWF1dGgtcGx1Z2luIGZvciB1c2Ugd2l0aCBrdWJlY3RsIGJ5IGZvbGxvd2luZw0KICAgICAgICBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vYmxvZy9wcm9kdWN0cy9jb250YWluZXJzLWt1YmVybmV0ZXMva3ViZWN0bC1hdXRoLWNoYW5nZXMtaW4tZ2tlDQogICAgICBpbnRlcmFjdGl2ZU1vZGU6IElmQXZhaWxhYmxlDQogICAgICBwcm92aWRlQ2x1c3RlckluZm86IHRydWUNCi0gbmFtZTogZ2tlX2FyY2FuZS10cmFuc2l0LTM1NzQxMV91cy1lYXN0MV9zaGFlZC1wcm9kdWN0aW9uDQogIHVzZXI6DQogICAgZXhlYzoNCiAgICAgIGFwaVZlcnNpb246IGNsaWVudC5hdXRoZW50aWNhdGlvbi5rOHMuaW8vdjFiZXRhMQ0KICAgICAgYXJnczogbnVsbA0KICAgICAgY29tbWFuZDogZ2tlLWdjbG91ZC1hdXRoLXBsdWdpbi5leGUNCiAgICAgIGVudjogbnVsbA0KICAgICAgaW5zdGFsbEhpbnQ6IEluc3RhbGwgZ2tlLWdjbG91ZC1hdXRoLXBsdWdpbiBmb3IgdXNlIHdpdGgga3ViZWN0bCBieSBmb2xsb3dpbmcNCiAgICAgICAgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2Jsb2cvcHJvZHVjdHMvY29udGFpbmVycy1rdWJlcm5ldGVzL2t1YmVjdGwtYXV0aC1jaGFuZ2VzLWluLWdrZQ0KICAgICAgaW50ZXJhY3RpdmVNb2RlOiBJZkF2YWlsYWJsZQ0KICAgICAgcHJvdmlkZUNsdXN0ZXJJbmZvOiB0cnVlDQotIG5hbWU6IGdrZV9hcmNhbmUtdHJhbnNpdC0zNTc0MTFfdXMtZWFzdDFfc2hhZWQtc3RhZ2luZw0KICB1c2VyOg0KICAgIGV4ZWM6DQogICAgICBhcGlWZXJzaW9uOiBjbGllbnQuYXV0aGVudGljYXRpb24uazhzLmlvL3YxYmV0YTENCiAgICAgIGFyZ3M6IG51bGwNCiAgICAgIGNvbW1hbmQ6IGdrZS1nY2xvdWQtYXV0aC1wbHVnaW4uZXhlDQogICAgICBlbnY6IG51bGwNCiAgICAgIGluc3RhbGxIaW50OiBJbnN0YWxsIGdrZS1nY2xvdWQtYXV0aC1wbHVnaW4gZm9yIHVzZSB3aXRoIGt1YmVjdGwgYnkgZm9sbG93aW5nDQogICAgICAgIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9ibG9nL3Byb2R1Y3RzL2NvbnRhaW5lcnMta3ViZXJuZXRlcy9rdWJlY3RsLWF1dGgtY2hhbmdlcy1pbi1na2UNCiAgICAgIGludGVyYWN0aXZlTW9kZTogSWZBdmFpbGFibGUNCiAgICAgIHByb3ZpZGVDbHVzdGVySW5mbzogdHJ1ZQ0K
kind: Secret
metadata:
  name: kubeconfig-secret
  namespace: default
type: Opaque
